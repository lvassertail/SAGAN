from typing import Callable

import torch
import torch.nn as nn
import torch.nn.functional as F
from autoencoder import EncoderCNN, DecoderCNN


class Discriminator(nn.Module):
    def __init__(self, in_size):
        """
        :param in_size: The size of on input image (without batch dimension).
        """
        super().__init__()
        self.in_size = in_size
        # TODO: Create the discriminator model layers.
        # To extract image features you can use the EncoderCNN from the VAE
        # section or implement something new.
        # You can then use either an affine layer or another conv layer to
        # flatten the features.
        # ====== YOUR CODE: ======
        self.encoder = EncoderCNN(in_size[0],512)
        self.classifier = nn.Linear(512, 1)
        # ========================

    def forward(self, x):
        """
        :param x: Input of shape (N,C,H,W) matching the given in_size.
        :return: Discriminator class score (aka logits, not probability) of
        shape (N,).
        """
        # TODO: Implement discriminator forward pass.
        # No need to apply sigmoid to obtain probability - we'll combine it
        # with the loss due to improved numerical stability.
        # ====== YOUR CODE: ======
        x = self.encoder(x)
        x = x.view(x.size(0), -1)
        y = self.classifier(x)
        # ========================
        return y


class Generator(nn.Module):
    def __init__(self, im_size, z_dim, featuremap_size=4, out_channels=3):
        """
        :param z_dim: Dimension of latent space.
        :featuremap_size: Spatial size of first feature map to create
        (determines output size). For example set to 4 for a 4x4 feature map.
        :out_channels: Number of channels in the generated image.
        """
        super().__init__()
        self.z_dim = z_dim

        # TODO: Create the generator model layers.
        # To combine image features you can use the DecoderCNN from the VAE
        # section or implement something new.
        # You can assume a fixed image size.
        # ====== YOUR CODE: ======
        self.feature_map = featuremap_size
        n = int(z_dim / (featuremap_size ** 2))
        self.in_size = n, 3, featuremap_size, featuremap_size

        self.decoder = DecoderCNN(self.z_dim, out_channels)
        # ========================

    def sample(self, n, with_grad=False):
        """
        Samples from the Generator.
        :param n: Number of instance-space samples to generate.
        :param with_grad: Whether the returned samples should track
        gradients or not. I.e., whether they should be part of the generator's
        computation graph or standalone tensors.
        :return: A batch of samples, shape (N,C,H,W).
        """
        device = next(self.parameters()).device
        # TODO: Sample from the model.
        # Generate n latent space samples and return their reconstructions.
        # Don't use a loop.
        # ====== YOUR CODE: ======
        torch.autograd.set_grad_enabled(with_grad)

        sample_dim = [n, self.z_dim]
        z = torch.randn(sample_dim, device=device, requires_grad=with_grad)
        samples = self.forward(z)

        torch.autograd.set_grad_enabled(True)
        # ========================
        return samples

    def forward(self, z):
        """
        :param z: A batch of latent space samples of shape (N, latent_dim).
        :return: A batch of generated images of shape (N,C,H,W) which should be
        the shape which the Discriminator accepts.
        """
        # TODO: Implement the Generator forward pass.
        # Don't forget to make sure the output instances have the same scale
        # as the original (real) images.
        # ====== YOUR CODE: ======
        z = torch.unsqueeze(z, dim=2)
        z = torch.unsqueeze(z, dim=3)
        x = self.decoder(z)
        # ========================
        return x


def discriminator_loss_fn(y_data, y_generated, data_label=0, label_noise=0.0):
    """
    Computes the combined loss of the discriminator given real and generated
    data using a binary cross-entropy metric.
    This is the loss used to update the Discriminator parameters.
    :param y_data: Discriminator class-scores of instances of data sampled
    from the dataset, shape (N,).
    :param y_generated: Discriminator class-scores of instances of data
    generated by the generator, shape (N,).
    :param data_label: 0 or 1, label of instances coming from the real dataset.
    :param label_noise: The range of the noise to add. For example, if
    data_label=0 and label_noise=0.2 then the labels of the real data will be
    uniformly sampled from the range [-0.1,+0.1].
    :return: The combined loss of both.
    """
    assert data_label == 1 or data_label == 0
    # TODO: Implement the discriminator loss.
    # See torch's BCEWithLogitsLoss for a numerically stable implementation.
    # ====== YOUR CODE: ======
    ones = torch.ones(y_data.size()).to(y_data.device) #torch.full(y_data.size(), data_label, device=y_data.device)
    zeros = torch.zeros(y_data.size()).to(y_data.device)

    a = -label_noise/2
    b = label_noise/2

    pos_noise = torch.distributions.uniform.Uniform(a, b).sample(ones.size()).to(y_data.device)
    neg_noise = torch.distributions.uniform.Uniform(a, b).sample(zeros.size()).to(y_data.device)

    criterion = nn.BCEWithLogitsLoss()
    loss_data = criterion(y_data, ones + pos_noise)
    loss_generated = criterion(y_generated, zeros + neg_noise)
    # ========================
    return loss_data + loss_generated


def generator_loss_fn(y_generated, data_label=0):
    """
    Computes the loss of the generator given generated data using a
    binary cross-entropy metric.
    This is the loss used to update the Generator parameters.
    :param y_generated: Discriminator class-scores of instances of data
    generated by the generator, shape (N,).
    :param data_label: 0 or 1, label of instances coming from the real dataset.
    :return: The generator loss.
    """
    # TODO: Implement the Generator loss.
    # Think about what you need to compare the input to, in order to
    # formulate the loss in terms of Binary Cross Entropy.
    # ====== YOUR CODE: ======
    if data_label > 0:
        a = torch.ones(y_generated.size()).to(y_generated.device)
    else:
        a = torch.zeros(y_generated.size()).to(y_generated.device)
    criterion = nn.BCEWithLogitsLoss()
    loss = criterion(y_generated, a)
    # ========================
    return loss
